import { db } from '../config/firebase'
import { collection, getDocs, doc, query, orderBy, getDoc, Timestamp, setDoc, deleteDoc, writeBatch } from 'firebase/firestore'
import { getAuth } from 'firebase/auth'

// –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≥–µ—Ä–æ—è—Ö
const initialHeroes = [
  {
    id: 'abaddon',
    name: 'abaddon',
    localizedName: 'Abaddon',
    primaryAttr: 'strength',
    attackType: 'melee',
    roles: ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ö–µ—Ä—Ä–∏', '–°—Ç–æ–π–∫–æ—Å—Ç—å', '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≥–µ—Ä–æ–µ–≤'],
    stats: {
      baseStr: 22,
      baseAgi: 23,
      baseInt: 19,
      strGain: 2.7,
      agiGain: 1.5,
      intGain: 2.0,
      moveSpeed: 325,
      armor: 2,
      attackRange: 600,
      attackDamageMin: 50,
      attackDamageMax: 60,
      attackRate: 1.7
    },
    abilities: [
      {
        name: 'Mist Coil',
        description: '–¶–µ–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –≤—ã–ø—É—Å–∫–∞–µ—Ç —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —Ç—É–º–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Ä–∞–≥—É –∏–ª–∏ –ª–µ—á–∏—Ç —Å–æ—é–∑–Ω–∏–∫–∞.',
        target: '–î–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: 600/625/650/675',
        isUltimate: false,
        stats: {
          manaCost: '50/60/70/80',
          cooldown: '4.5'
        }
      },
      {
        name: 'Aphotic Shield',
        description: '–û–∫—Ä—É–∂–∞–µ—Ç —Å–æ—é–∑–Ω–∏–∫–∞ –±–∞—Ä—å–µ—Ä–æ–º –∏–∑ —Ç—ë–º–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞ –∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —É—Ä–æ–Ω–∞. –í–∑—Ä—ã–≤ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Å–µ–º –≤—Ä–∞–≥–∞–º –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –ü—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–Ω–∏–º–∞–µ—Ç —Å —Ü–µ–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.',
        isUltimate: false,
        target: '–î–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: 550',
        stats: {
          manaCost: '100/105/110/115',
          cooldown: '12/10/8/6'
        }
      }
    ],
    talents: [
      {
        name: '+15% Mist Coil heal/damage',
        level: 10
      },
      {
        name: '+50 Damage',
        level: 15
      },
      {
        name: '-2s Aphotic Shield Cooldown',
        level: 20
      },
      {
        name: '+200 Borrowed Time Threshold',
        level: 25
      }
    ]
  }
];

// –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω –ø—Ä–∞–≤
const checkAdminRights = async () => {
  const auth = getAuth();
  const user = auth.currentUser;
  
  if (!user) {
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  }

  return true;
};

export const heroesService = {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
  initializeHeroesDatabase: async () => {
    try {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      const heroesRef = collection(db, 'heroes');
      const snapshot = await getDocs(heroesRef);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const existingHeroes = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      
      console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–µ—Ä–æ–∏:', existingHeroes);
      
      // –£–¥–∞–ª–∏–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      console.log('–û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
      const deletePromises = snapshot.docs.map(doc => 
        deleteDoc(doc.ref)
      );
      await Promise.all(deletePromises);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ initialHeroes
      const uniqueHeroes = initialHeroes.reduce((acc, hero) => {
        const existingHero = acc.find(h => 
          h.name === hero.name || 
          h.id === hero.id || 
          h.localizedName === hero.localizedName
        );
        
        if (!existingHero) {
          acc.push(hero);
        } else {
          console.log('–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç:', {
            existing: existingHero,
            duplicate: hero
          });
        }
        return acc;
      }, []);
      
      // –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log('–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      for (const hero of uniqueHeroes) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏–∑ –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        const heroId = hero.name
          .toLowerCase()
          .replace(/[^a-z0-9]/g, '')
          .replace(/\s+/g, '');
          
        console.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ—Ä–æ—è ${hero.name} —Å ID: ${heroId}`);
        
        const heroRef = doc(db, 'heroes', heroId);
        await setDoc(heroRef, {
          ...hero,
          id: heroId, // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –¥–∞–Ω–Ω—ã–µ
          updatedAt: Timestamp.fromDate(new Date())
        });
      }

      console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤ –∏–∑ Firebase
  getHeroesFromFirebase: async () => {
    try {
      console.log('=== –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –∏–∑ Firebase ===');
      
      const heroesRef = collection(db, 'heroes')
      const q = query(heroesRef, orderBy('localizedName'))
      const snapshot = await getDocs(q)
      
      if (snapshot.empty) {
        console.log('‚ùå –ë–∞–∑–∞ –≥–µ—Ä–æ–µ–≤ –ø—É—Å—Ç–∞');
        return []; 
      }
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≥–µ—Ä–æ–µ–≤: ${snapshot.size}`);
      
      const heroes = snapshot.docs.map(doc => {
        const data = doc.data()
        console.log(`\nü¶∏ –ì–µ—Ä–æ–π: ${doc.id}`);
        console.log(JSON.stringify(data, null, 2));
        
        return {
          id: doc.id,
          ...data,
          updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate() : null
        }
      })

      console.log(`\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${heroes.length} –≥–µ—Ä–æ–µ–≤`);
      console.log('=== –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ—Ä–æ–µ–≤ ===\n');
      
      return heroes
    } catch (error) {
      console.error('–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ—Ä–æ–µ–≤:', error)
      if (error.code === 'permission-denied') {
        throw new Error('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ Firebase. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.');
      }
      throw error
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–µ—Ä–æ–µ –ø–æ ID
  getHeroById: async (heroId) => {
    try {
      console.log('=== –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ—Ä–æ—è –ø–æ ID ===');
      console.log('ID –≥–µ—Ä–æ—è:', heroId);
      
      const heroRef = doc(db, 'heroes', heroId);
      const heroDoc = await getDoc(heroRef);
      
      if (!heroDoc.exists()) {
        console.log('‚ùå –ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
        throw new Error('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const data = heroDoc.data();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ—è –≤ –ë–î:', JSON.stringify(data, null, 2));
      
      const hero = {
        id: heroDoc.id,
        ...data,
        updatedAt: data.updatedAt ? new Date(data.updatedAt) : null
      };
      
      console.log('üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ—è:', JSON.stringify(hero, null, 2));
      console.log('=== –ö–æ–Ω–µ—Ü –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ—Ä–æ—è ===');
      
      return hero;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ—Ä–æ—è:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ—Ä–æ—è –ø–æ –∏–º–µ–Ω–∏
  async getHeroByName(heroName) {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ—Ä–æ—è –ø–æ –∏–º–µ–Ω–∏:', heroName);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ ID
      const heroRef = doc(db, 'heroes', heroName);
      const heroDoc = await getDoc(heroRef);
      
      if (!heroDoc.exists()) {
        console.log('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏...');
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø–æ–∏—â–µ–º –ø–æ –ø–æ–ª—é name
        const heroesRef = collection(db, 'heroes');
        const q = query(heroesRef);
        const snapshot = await getDocs(q);
        
        const hero = snapshot.docs.find(doc => {
          const data = doc.data();
          return data.name === heroName;
        });

        if (!hero) {
          console.log('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ ID, –Ω–∏ –ø–æ –∏–º–µ–Ω–∏');
          throw new Error('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const data = hero.data();
        console.log('–ù–∞–π–¥–µ–Ω –≥–µ—Ä–æ–π –ø–æ –∏–º–µ–Ω–∏:', data);
        return {
          id: hero.id,
          ...data,
          updatedAt: data.updatedAt?.toDate() || null
        };
      }

      const data = heroDoc.data();
      console.log('–ù–∞–π–¥–µ–Ω –≥–µ—Ä–æ–π –ø–æ ID:', data);
      
      return {
        id: heroDoc.id,
        ...data,
        updatedAt: data.updatedAt?.toDate() || null
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ—Ä–æ—è:', error);
      throw error;
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤
  deleteAllHeroes: async () => {
    try {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤...');
      
      const heroesRef = collection(db, 'heroes');
      const snapshot = await getDocs(heroesRef);
      
      if (snapshot.empty) {
        console.log('–ë–∞–∑–∞ –≥–µ—Ä–æ–µ–≤ —É–∂–µ –ø—É—Å—Ç–∞');
        return;
      }

      console.log(`–£–¥–∞–ª—è–µ–º ${snapshot.size} –≥–µ—Ä–æ–µ–≤...`);
      const deletePromises = snapshot.docs.map(doc => deleteDoc(doc.ref));
      await Promise.all(deletePromises);
      
      console.log('–í—Å–µ –≥–µ—Ä–æ–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–µ—Ä–æ–µ–≤:', error);
      throw error;
    }
  },

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤ –∏–∑ WordPress API
  saveHeroesFromWordPress: async (heroes) => {
    try {
      console.log('=== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤ –∏–∑ WordPress ===');
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${heroes.length} –≥–µ—Ä–æ–µ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
      
      const batch = writeBatch(db);
      const heroesRef = collection(db, 'heroes');
      
      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–µ—Ä–æ–µ–≤
      const existingHeroes = await getDocs(heroesRef);
      existingHeroes.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤
      heroes.forEach(hero => {
        const heroDoc = doc(heroesRef);
        batch.set(heroDoc, {
          hero_id: hero.hero_id,
          title: hero.title,
          slug: hero.slug,
          updatedAt: Timestamp.now()
        });
      });
      
      await batch.commit();
      console.log('‚úÖ –ì–µ—Ä–æ–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase');
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–µ—Ä–æ–µ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –∏–∑ Firebase –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  getHeroesForAnalytics: async () => {
    try {
      console.log('=== –ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ===');
      
      const heroesRef = collection(db, 'heroes');
      const snapshot = await getDocs(heroesRef);
      
      if (snapshot.empty) {
        console.log('‚ùå –ë–∞–∑–∞ –≥–µ—Ä–æ–µ–≤ –ø—É—Å—Ç–∞');
        return {}; 
      }
      
      const heroesMap = {};
      snapshot.docs.forEach(doc => {
        const data = doc.data();
        if (data.hero_id) {
          heroesMap[data.hero_id] = data;
        }
      });
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(heroesMap).length} –≥–µ—Ä–æ–µ–≤`);
      console.log('–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ—è:', Object.values(heroesMap)[0]);
      return heroesMap;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ—Ä–æ–µ–≤:', error);
      throw error;
    }
  }
}

export default heroesService 